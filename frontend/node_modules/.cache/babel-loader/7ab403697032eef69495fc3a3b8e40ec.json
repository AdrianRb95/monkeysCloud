{"ast":null,"code":"import { TaskStore } from \"./store\";\nimport actions from \"./constants\";\nexport default function useActions() {\n  const [state, dispatch] = TaskStore.useTask();\n\n  function setVal(key, value) {\n    dispatch({\n      type: actions.SET_VAL,\n      payload: {\n        key,\n        value\n      }\n    });\n  }\n\n  async function loadTasks() {\n    try {\n      dispatch({\n        type: actions.SET_VAL,\n        payload: {\n          key: \"tasks\",\n          value: []\n        }\n      });\n      dispatch({\n        type: actions.SET_VAL,\n        payload: {\n          key: \"loadTasksStatus\",\n          value: \"loading\"\n        }\n      }); //   API CALL\n\n      setTimeout(() => {\n        dispatch({\n          type: actions.SET_VAL,\n          payload: {\n            key: \"tasks\",\n            value: [{\n              id: 1,\n              name: \"Tag\",\n              date: \"MM/DD/YY\",\n              state: \"todo\"\n            }, {\n              id: 2,\n              name: \"Tag\",\n              date: \"MM/DD/YY\",\n              state: \"working\"\n            }, {\n              id: 3,\n              name: \"Tag\",\n              date: \"MM/DD/YY\",\n              state: \"done\"\n            }]\n          }\n        });\n        dispatch({\n          type: actions.SET_VAL,\n          payload: {\n            key: \"loadTasksStatus\",\n            value: \"success\"\n          }\n        });\n      }, 500);\n    } catch (err) {\n      // Showing error and rolling back\n      console.error(err, \"loadTasks\");\n      dispatch({\n        type: actions.SET_VAL,\n        payload: {\n          key: \"tasks\",\n          value: []\n        }\n      });\n      dispatch({\n        type: actions.SET_VAL,\n        payload: {\n          key: \"loadTasksStatus\",\n          value: \"error\"\n        }\n      });\n    }\n  }\n\n  return {\n    state,\n    dispatch,\n    loadTasks,\n    setVal\n  };\n}","map":{"version":3,"sources":["C:/Users/oscar/OneDrive/Escritorio/monkeysCloud/frontend/src/store/task/actions.js"],"names":["TaskStore","actions","useActions","state","dispatch","useTask","setVal","key","value","type","SET_VAL","payload","loadTasks","setTimeout","id","name","date","err","console","error"],"mappings":"AAAA,SAASA,SAAT,QAA0B,SAA1B;AAEA,OAAOC,OAAP,MAAoB,aAApB;AAEA,eAAe,SAASC,UAAT,GAAsB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,SAAS,CAACK,OAAV,EAA1B;;AAEA,WAASC,MAAT,CAAgBC,GAAhB,EAAqBC,KAArB,EAA4B;AAC1BJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,OAAO,CAACS,OADP;AAEPC,MAAAA,OAAO,EAAE;AACPJ,QAAAA,GADO;AAEPC,QAAAA;AAFO;AAFF,KAAD,CAAR;AAOD;;AAED,iBAAeI,SAAf,GAA2B;AACzB,QAAI;AACFR,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAER,OAAO,CAACS,OADP;AAEPC,QAAAA,OAAO,EAAE;AACPJ,UAAAA,GAAG,EAAE,OADE;AAEPC,UAAAA,KAAK,EAAE;AAFA;AAFF,OAAD,CAAR;AAOAJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAER,OAAO,CAACS,OADP;AAEPC,QAAAA,OAAO,EAAE;AACPJ,UAAAA,GAAG,EAAE,iBADE;AAEPC,UAAAA,KAAK,EAAE;AAFA;AAFF,OAAD,CAAR,CARE,CAgBF;;AACAK,MAAAA,UAAU,CAAC,MAAM;AACfT,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAER,OAAO,CAACS,OADP;AAEPC,UAAAA,OAAO,EAAE;AACPJ,YAAAA,GAAG,EAAE,OADE;AAEPC,YAAAA,KAAK,EAAE,CACL;AAAEM,cAAAA,EAAE,EAAE,CAAN;AAASC,cAAAA,IAAI,EAAE,KAAf;AAAsBC,cAAAA,IAAI,EAAE,UAA5B;AAAwCb,cAAAA,KAAK,EAAE;AAA/C,aADK,EAEL;AAAEW,cAAAA,EAAE,EAAE,CAAN;AAASC,cAAAA,IAAI,EAAE,KAAf;AAAsBC,cAAAA,IAAI,EAAE,UAA5B;AAAwCb,cAAAA,KAAK,EAAE;AAA/C,aAFK,EAGL;AAAEW,cAAAA,EAAE,EAAE,CAAN;AAASC,cAAAA,IAAI,EAAE,KAAf;AAAsBC,cAAAA,IAAI,EAAE,UAA5B;AAAwCb,cAAAA,KAAK,EAAE;AAA/C,aAHK;AAFA;AAFF,SAAD,CAAR;AAWAC,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAER,OAAO,CAACS,OADP;AAEPC,UAAAA,OAAO,EAAE;AACPJ,YAAAA,GAAG,EAAE,iBADE;AAEPC,YAAAA,KAAK,EAAE;AAFA;AAFF,SAAD,CAAR;AAOD,OAnBS,EAmBP,GAnBO,CAAV;AAoBD,KArCD,CAqCE,OAAOS,GAAP,EAAY;AACZ;AACAC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,EAAmB,WAAnB;AACAb,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAER,OAAO,CAACS,OADP;AAEPC,QAAAA,OAAO,EAAE;AACPJ,UAAAA,GAAG,EAAE,OADE;AAEPC,UAAAA,KAAK,EAAE;AAFA;AAFF,OAAD,CAAR;AAOAJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAER,OAAO,CAACS,OADP;AAEPC,QAAAA,OAAO,EAAE;AACPJ,UAAAA,GAAG,EAAE,iBADE;AAEPC,UAAAA,KAAK,EAAE;AAFA;AAFF,OAAD,CAAR;AAOD;AACF;;AAED,SAAO;AACLL,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLQ,IAAAA,SAHK;AAILN,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { TaskStore } from \"./store\";\r\n\r\nimport actions from \"./constants\";\r\n\r\nexport default function useActions() {\r\n  const [state, dispatch] = TaskStore.useTask();\r\n\r\n  function setVal(key, value) {\r\n    dispatch({\r\n      type: actions.SET_VAL,\r\n      payload: {\r\n        key,\r\n        value,\r\n      },\r\n    });\r\n  }\r\n\r\n  async function loadTasks() {\r\n    try {\r\n      dispatch({\r\n        type: actions.SET_VAL,\r\n        payload: {\r\n          key: \"tasks\",\r\n          value: [],\r\n        },\r\n      });\r\n      dispatch({\r\n        type: actions.SET_VAL,\r\n        payload: {\r\n          key: \"loadTasksStatus\",\r\n          value: \"loading\",\r\n        },\r\n      });\r\n\r\n      //   API CALL\r\n      setTimeout(() => {\r\n        dispatch({\r\n          type: actions.SET_VAL,\r\n          payload: {\r\n            key: \"tasks\",\r\n            value: [\r\n              { id: 1, name: \"Tag\", date: \"MM/DD/YY\", state: \"todo\" },\r\n              { id: 2, name: \"Tag\", date: \"MM/DD/YY\", state: \"working\" },\r\n              { id: 3, name: \"Tag\", date: \"MM/DD/YY\", state: \"done\" },\r\n            ],\r\n          },\r\n        });\r\n        dispatch({\r\n          type: actions.SET_VAL,\r\n          payload: {\r\n            key: \"loadTasksStatus\",\r\n            value: \"success\",\r\n          },\r\n        });\r\n      }, 500);\r\n    } catch (err) {\r\n      // Showing error and rolling back\r\n      console.error(err, \"loadTasks\");\r\n      dispatch({\r\n        type: actions.SET_VAL,\r\n        payload: {\r\n          key: \"tasks\",\r\n          value: [],\r\n        },\r\n      });\r\n      dispatch({\r\n        type: actions.SET_VAL,\r\n        payload: {\r\n          key: \"loadTasksStatus\",\r\n          value: \"error\",\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    state,\r\n    dispatch,\r\n    loadTasks,\r\n    setVal,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}