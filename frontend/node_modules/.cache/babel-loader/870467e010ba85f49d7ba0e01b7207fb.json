{"ast":null,"code":"var _jsxFileName = \"D:\\\\ColibriCode\\\\monkeysCloud\\\\frontend\\\\src\\\\store\\\\sprint\\\\store.js\";\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport actions from \"./constants\";\nconst defaultState = {\n  tasks: [],\n  sprints: [],\n  loadSprintsStatus: \"idle\",\n  selectedIssue: {\n    id: \"\",\n    sprint_id: \"\",\n    name: \"\",\n    status: \"\",\n    title: \"\",\n    description: \"\",\n    attachments: [],\n    comments: [],\n    assignee: {\n      id: \"\",\n      first_name: \"\",\n      last_name: \"\",\n      image: null,\n      color: \"\"\n    },\n    reporter: {\n      id: \"\",\n      first_name: \"\",\n      last_name: \"\",\n      image: null,\n      color: \"\"\n    },\n    development: \"\",\n    labels: [],\n    original_estimate: 0,\n    time_tracking: \"\",\n    priority: \"\",\n    components: [],\n    fix_versions: [],\n    epic_link: \"\",\n    epic_color: \"\",\n    completed_sprints: [],\n    watchers: []\n  }\n};\n\nconst reducer = (state = defaultState, action = {}) => {\n  const {\n    type\n  } = action;\n\n  switch (type) {\n    case actions.SET_VAL:\n      return { ...state,\n        [action.payload.key]: action.payload.value\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nconst State = createContext(null);\nconst Dispatch = createContext(null);\nexport function Provider({\n  children\n}) {\n  const [state, dispatch] = useReducer(reducer, defaultState);\n  return /*#__PURE__*/React.createElement(State.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Dispatch.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, children));\n}\nexport const SprintStore = {\n  State,\n  Dispatch,\n  Provider,\n  useSprint: () => [useContext(State), useContext(Dispatch)]\n};","map":{"version":3,"sources":["D:/ColibriCode/monkeysCloud/frontend/src/store/sprint/store.js"],"names":["React","createContext","useContext","useReducer","actions","defaultState","tasks","sprints","loadSprintsStatus","selectedIssue","id","sprint_id","name","status","title","description","attachments","comments","assignee","first_name","last_name","image","color","reporter","development","labels","original_estimate","time_tracking","priority","components","fix_versions","epic_link","epic_color","completed_sprints","watchers","reducer","state","action","type","SET_VAL","payload","key","value","State","Dispatch","Provider","children","dispatch","SprintStore","useSprint"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nimport actions from \"./constants\";\r\n\r\nconst defaultState = {\r\n  tasks: [],\r\n  sprints: [],\r\n  loadSprintsStatus: \"idle\",\r\n  selectedIssue: {\r\n    id: \"\",\r\n    sprint_id: \"\",\r\n    name: \"\",\r\n    status: \"\",\r\n    title: \"\",\r\n    description: \"\",\r\n    attachments: [],\r\n    comments: [],\r\n    assignee: {\r\n      id: \"\",\r\n      first_name: \"\",\r\n      last_name: \"\",\r\n      image: null,\r\n      color: \"\",\r\n    },\r\n    reporter: {\r\n      id: \"\",\r\n      first_name: \"\",\r\n      last_name: \"\",\r\n      image: null,\r\n      color: \"\",\r\n    },\r\n    development: \"\",\r\n    labels: [],\r\n    original_estimate: 0,\r\n    time_tracking: \"\",\r\n    priority: \"\",\r\n    components: [],\r\n    fix_versions: [],\r\n    epic_link: \"\",\r\n    epic_color: \"\",\r\n    completed_sprints: [],\r\n    watchers: [],\r\n  },\r\n};\r\n\r\nconst reducer = (state = defaultState, action = {}) => {\r\n  const { type } = action;\r\n  switch (type) {\r\n    case actions.SET_VAL:\r\n      return {\r\n        ...state,\r\n        [action.payload.key]: action.payload.value,\r\n      };\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nconst State = createContext(null);\r\nconst Dispatch = createContext(null);\r\n\r\nexport function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, defaultState);\r\n\r\n  return (\r\n    <State.Provider value={state}>\r\n      <Dispatch.Provider value={dispatch}>{children}</Dispatch.Provider>\r\n    </State.Provider>\r\n  );\r\n}\r\n\r\nexport const SprintStore = {\r\n  State,\r\n  Dispatch,\r\n  Provider,\r\n  useSprint: () => [useContext(State), useContext(Dispatch)],\r\n};\r\n"]},"metadata":{},"sourceType":"module"}