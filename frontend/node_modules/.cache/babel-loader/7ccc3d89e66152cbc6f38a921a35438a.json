{"ast":null,"code":"import axios from '../../api/axios';\nimport { AuthStore } from './store';\nimport { deleteItem, getItem, setItem } from '../../utils/localstorage';\nimport types from './constants';\nexport default function useActions() {\n  const [state, dispatch] = AuthStore.useAuthStore();\n  const baseUrl = 'user';\n  const tokenName = 'jwtToken';\n\n  const login = async user => {\n    try {\n      const {\n        data\n      } = await axios.post(baseUrl + '/login', user);\n      appLogin(data.user, data.token);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const googleLogin = async tokenId => {\n    try {\n      const {\n        data\n      } = await axios.post(baseUrl + '/googleLogin', {\n        tokenId\n      });\n      appLogin(data.user, data.token);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const appLogin = (user, token) => {\n    dispatch({\n      type: types.SET_USER,\n      payload: user\n    });\n    axios.setJwt(token);\n    setItem(token, tokenName);\n  };\n\n  const logOut = () => {\n    dispatch({\n      type: types.SET_USER,\n      payload: null\n    });\n    axios.setJwt(null);\n    deleteItem(tokenName);\n  };\n\n  const autoLogin = async () => {\n    try {\n      const token = getItem(tokenName);\n      if (!token) throw Error();\n      axios.setJwt(token);\n      const {\n        data\n      } = await axios.get(baseUrl + '/me');\n      dispatch({\n        type: types.SET_USER,\n        payload: data.user\n      });\n    } catch (error) {\n      logOut();\n    }\n  };\n\n  return {\n    autoLogin,\n    googleLogin,\n    logOut,\n    login,\n    state\n  };\n}","map":{"version":3,"sources":["C:/Users/PC/Desktop/colibricode/monkeysCloud/frontend/src/store/auth/actions.js"],"names":["axios","AuthStore","deleteItem","getItem","setItem","types","useActions","state","dispatch","useAuthStore","baseUrl","tokenName","login","user","data","post","appLogin","token","error","console","log","googleLogin","tokenId","type","SET_USER","payload","setJwt","logOut","autoLogin","Error","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,SAASC,SAAT,QAA0B,SAA1B;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,OAA9B,QAA6C,0BAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,eAAe,SAASC,UAAT,GAAsB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,SAAS,CAACQ,YAAV,EAA1B;AACA,QAAMC,OAAO,GAAG,MAAhB;AACA,QAAMC,SAAS,GAAG,UAAlB;;AAEA,QAAMC,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMd,KAAK,CAACe,IAAN,CAAWL,OAAO,GAAG,QAArB,EAA+BG,IAA/B,CAAvB;AACAG,MAAAA,QAAQ,CAACF,IAAI,CAACD,IAAN,EAAYC,IAAI,CAACG,KAAjB,CAAR;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAPD;;AASA,QAAMG,WAAW,GAAG,MAAMC,OAAN,IAAiB;AACnC,QAAI;AACF,YAAM;AAAER,QAAAA;AAAF,UAAW,MAAMd,KAAK,CAACe,IAAN,CAAWL,OAAO,GAAG,cAArB,EAAqC;AAAEY,QAAAA;AAAF,OAArC,CAAvB;AACAN,MAAAA,QAAQ,CAACF,IAAI,CAACD,IAAN,EAAYC,IAAI,CAACG,KAAjB,CAAR;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAPD;;AASA,QAAMF,QAAQ,GAAG,CAACH,IAAD,EAAOI,KAAP,KAAiB;AAChCT,IAAAA,QAAQ,CAAC;AACPe,MAAAA,IAAI,EAAElB,KAAK,CAACmB,QADL;AAEPC,MAAAA,OAAO,EAAEZ;AAFF,KAAD,CAAR;AAIAb,IAAAA,KAAK,CAAC0B,MAAN,CAAaT,KAAb;AACAb,IAAAA,OAAO,CAACa,KAAD,EAAQN,SAAR,CAAP;AACD,GAPD;;AASA,QAAMgB,MAAM,GAAG,MAAM;AACnBnB,IAAAA,QAAQ,CAAC;AAAEe,MAAAA,IAAI,EAAElB,KAAK,CAACmB,QAAd;AAAwBC,MAAAA,OAAO,EAAE;AAAjC,KAAD,CAAR;AACAzB,IAAAA,KAAK,CAAC0B,MAAN,CAAa,IAAb;AACAxB,IAAAA,UAAU,CAACS,SAAD,CAAV;AACD,GAJD;;AAMA,QAAMiB,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAMX,KAAK,GAAGd,OAAO,CAACQ,SAAD,CAArB;AACA,UAAI,CAACM,KAAL,EAAY,MAAMY,KAAK,EAAX;AACZ7B,MAAAA,KAAK,CAAC0B,MAAN,CAAaT,KAAb;AACA,YAAM;AAAEH,QAAAA;AAAF,UAAW,MAAMd,KAAK,CAAC8B,GAAN,CAAUpB,OAAO,GAAG,KAApB,CAAvB;AACAF,MAAAA,QAAQ,CAAC;AACPe,QAAAA,IAAI,EAAElB,KAAK,CAACmB,QADL;AAEPC,QAAAA,OAAO,EAAEX,IAAI,CAACD;AAFP,OAAD,CAAR;AAID,KATD,CASE,OAAOK,KAAP,EAAc;AACdS,MAAAA,MAAM;AACP;AACF,GAbD;;AAeA,SAAO;AACLC,IAAAA,SADK;AAELP,IAAAA,WAFK;AAGLM,IAAAA,MAHK;AAILf,IAAAA,KAJK;AAKLL,IAAAA;AALK,GAAP;AAOD","sourcesContent":["import axios from '../../api/axios';\r\nimport { AuthStore } from './store';\r\nimport { deleteItem, getItem, setItem } from '../../utils/localstorage';\r\nimport types from './constants';\r\n\r\nexport default function useActions() {\r\n  const [state, dispatch] = AuthStore.useAuthStore();\r\n  const baseUrl = 'user';\r\n  const tokenName = 'jwtToken';\r\n\r\n  const login = async user => {\r\n    try {\r\n      const { data } = await axios.post(baseUrl + '/login', user);\r\n      appLogin(data.user, data.token);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const googleLogin = async tokenId => {\r\n    try {\r\n      const { data } = await axios.post(baseUrl + '/googleLogin', { tokenId });\r\n      appLogin(data.user, data.token);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const appLogin = (user, token) => {\r\n    dispatch({\r\n      type: types.SET_USER,\r\n      payload: user,\r\n    });\r\n    axios.setJwt(token);\r\n    setItem(token, tokenName);\r\n  };\r\n\r\n  const logOut = () => {\r\n    dispatch({ type: types.SET_USER, payload: null });\r\n    axios.setJwt(null);\r\n    deleteItem(tokenName);\r\n  };\r\n\r\n  const autoLogin = async () => {\r\n    try {\r\n      const token = getItem(tokenName);\r\n      if (!token) throw Error();\r\n      axios.setJwt(token);\r\n      const { data } = await axios.get(baseUrl + '/me');\r\n      dispatch({\r\n        type: types.SET_USER,\r\n        payload: data.user,\r\n      });\r\n    } catch (error) {\r\n      logOut();\r\n    }\r\n  };\r\n\r\n  return {\r\n    autoLogin,\r\n    googleLogin,\r\n    logOut,\r\n    login,\r\n    state,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}