{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\n\nvar settle = require('./../core/settle');\n\nvar buildURL = require('./../helpers/buildURL');\n\nvar buildFullPath = require('../core/buildFullPath');\n\nvar parseHeaders = require('./../helpers/parseHeaders');\n\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\n\nvar createError = require('../core/createError');\n\nconst {\n  GiConsoleController\n} = require('react-icons/gi');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    console.log(requestHeaders);\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest(); // HTTP basic authentication\n\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS\n\n    request.timeout = config.timeout; // Listen for ready state\n\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      } // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n\n\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      } // Prepare the response\n\n\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n      settle(resolve, reject, response); // Clean up request\n\n      request = null;\n    }; // Handle browser request cancellation (as opposed to a manual cancellation)\n\n\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request\n\n      request = null;\n    }; // Handle low level network errors\n\n\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request)); // Clean up request\n\n      request = null;\n    }; // Handle timeout\n\n\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request)); // Clean up request\n\n      request = null;\n    }; // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n\n\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies'); // Add xsrf header\n\n\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;\n\n      if (xsrfValue) {\n        console.log(xsrfValue);\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    } // Add headers to the request\n\n\n    if ('setRequestHeader' in request) {\n      console.log('Hello 23');\n      console.log(requestHeaders);\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        console.log(requestData);\n\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    } // Add withCredentials to request if needed\n\n\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    } // Add responseType to request if needed\n\n\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    } // Handle progress if needed\n\n\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    } // Not all browsers support upload events\n\n\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel); // Clean up request\n\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    } // Send the request\n\n\n    request.send(requestData);\n  });\n};","map":{"version":3,"sources":["/Users/yorch/development/monkeysCloud/frontend/node_modules/axios/lib/adapters/xhr.js"],"names":["utils","require","settle","buildURL","buildFullPath","parseHeaders","isURLSameOrigin","createError","GiConsoleController","module","exports","xhrAdapter","config","Promise","dispatchXhrRequest","resolve","reject","requestData","data","requestHeaders","headers","console","log","isFormData","request","XMLHttpRequest","auth","username","password","Authorization","btoa","fullPath","baseURL","url","open","method","toUpperCase","params","paramsSerializer","timeout","onreadystatechange","handleLoad","readyState","status","responseURL","indexOf","responseHeaders","getAllResponseHeaders","responseData","responseType","responseText","response","statusText","onabort","handleAbort","onerror","handleError","ontimeout","handleTimeout","timeoutErrorMessage","isStandardBrowserEnv","cookies","xsrfValue","withCredentials","xsrfCookieName","read","undefined","xsrfHeaderName","forEach","setRequestHeader","val","key","toLowerCase","isUndefined","e","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","then","onCanceled","cancel","abort","send"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nconst { GiConsoleController } = require('react-icons/gi');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    console.log(requestHeaders);\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        console.log(xsrfValue);\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      console.log('Hello 23');\n      console.log(requestHeaders);\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        console.log(requestData);\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}